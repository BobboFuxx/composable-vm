# generated by datamodel-codegen:
#   filename:  composablefi_networks.json

from __future__ import annotations

from pydantic import BaseModel, Field


class Devnet(BaseModel):
    ACCOUNT_PREFIX: str
    BASE_DIR: str
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_DATA: str
    CHAIN_DIR: str
    CHAIN_ID: str
    CONFIG_FOLDER: str
    CONSENSUS_GRPC_PORT: int
    CONSENSUS_RPC_PORT: int
    FEE: str
    GRPCPORT: int
    GRPCWEB: int
    KEYRING_TEST: str
    NETWORK_ID: int
    NODE: str
    P2PPORT: int
    PORT: int
    RESTPORT: int
    ROSETTA_PORT: int
    RPCPORT: int
    STAKEDENOM: str


class Mainnet(BaseModel):
    ACCOUNT_PREFIX: str
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_ID: str
    DIR: str
    FEE: str
    NETWORK_ID: int
    NODE: str
    STAKEDENOM: str


class CosmosHub(BaseModel):
    devnet: Devnet
    mainnet: Mainnet


class Directories(BaseModel):
    DATA_DIRECTORY: str
    HOME: str
    LOG_DIRECTORY: str


class Mnemonics(BaseModel):
    ALICE: str
    APPLICATION1: str
    APPLICATION2: str
    BOB: str
    DEMO_MNEMONIC_1: str
    DEMO_MNEMONIC_2: str
    DEMO_MNEMONIC_3: str
    EXCHNANGE_1: str
    FAUCET_MNEMONIC: str
    MANTIS_1: str
    RLY_MNEMONIC_1: str
    RLY_MNEMONIC_2: str
    RLY_MNEMONIC_3: str
    RLY_MNEMONIC_4: str
    TEST1: str
    TEST2: str
    VAL_MNEMONIC_1: str
    VAL_MNEMONIC_2: str
    VAL_MNEMONIC_3: str


class Devnet1(BaseModel):
    directories: Directories
    mnemonics: Mnemonics


class Devnet2(BaseModel):
    ACCOUNT_PREFIX: str
    BASE_DIR: str
    BINARY: str
    BLOCK_SECONDS: int
    CHAINID: str
    CHAIN_DATA: str
    CHAIN_DIR: str
    CHAIN_ID: str
    CONFIG_FOLDER: str
    CONSENSUS_GRPC_PORT: int
    CONSENSUS_RPC_PORT: int
    FEE: str
    GRPCPORT: int
    GRPCWEB: int
    IBCATOMDENOM: str
    IBCUSDCDENOM: str
    KEYRING_TEST: str
    NETWORK_ID: int
    NODE: str
    P2PPORT: int
    PORT: int
    RESTPORT: int
    ROSETTA_PORT: int
    RPCPORT: int
    STAKEDENOM: str


class Mainnet1(BaseModel):
    ACCOUNT_PREFIX: str
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_ID: str
    DIR: str
    FEE: str
    IBCATOMDENOM: str
    IBCUSDCDENOM: str
    NETWORK_ID: int
    NODE: str
    STAKEDENOM: str


class Neutron(BaseModel):
    devnet: Devnet2
    mainnet: Mainnet1


class Devnet3(BaseModel):
    ACCOUNT_PREFIX: str
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_DATA: str
    CHAIN_ID: str
    CONFIG_FOLDER: str
    CONSENSUS_GRPC_PORT: int
    CONSENSUS_RPC_PORT: int
    FEE: str
    GRPCPORT: int
    GRPCWEB: int
    KEYRING_TEST: str
    NETWORK_ID: int
    NODE: str
    P2PPORT: int
    PROMETHEUS_PORT: int
    RESTPORT: int
    RPCPORT: int


class Mainnet2(BaseModel):
    ACCOUNT_PREFIX: str
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_ID: str
    DIR: str
    FEE: str
    NETWORK_ID: int
    NODE: str


class RemoteDevnet(BaseModel):
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_ID: str
    DIR: str
    FEE: str
    NETWORK_ID: int
    NODE: str


class Testnet(BaseModel):
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_ID: str
    DIR: str
    FEE: str
    NETWORK_ID: int
    NODE: str


class Osmosis(BaseModel):
    devnet: Devnet3
    mainnet: Mainnet2
    remote_devnet: RemoteDevnet = Field(..., alias='remote-devnet')
    testnet: Testnet


class Devnet4(BaseModel):
    CHAIN_ID_A: str
    CHAIN_ID_B: str
    RELAY_DATA: str
    REST_PORT: int
    TELEMETRY_PORT: int


class OsmosisCentauri(BaseModel):
    devnet: Devnet4


class Devnet5(BaseModel):
    ACCOUNT_PREFIX: str
    BASE_DIR: str
    BINARY: str
    BLOCK_SECONDS: int
    CHAIN_DATA: str
    CHAIN_DIR: str
    CHAIN_DIR_NAME: str
    CHAIN_ID: str
    CONFIG_FOLDER: str
    CONSENSUS_GRPC_PORT: int
    CONSENSUS_RPC_PORT: int
    FEE: str
    GRPCPORT: int
    GRPWEB: int
    KEYRING_TEST: str
    LOG_DIRECTORY: str
    NETWORK_ID: int
    NODE: str
    RESTPORT: int


class Mainnet3(BaseModel):
    ACCOUNT_PREFIX: str
    BINARY: str
    BLOCK_TIME: int
    CHAIN_ID: str
    DIR: str
    FEE: str
    GRPC: str
    GRPC_SECURE: str
    NETWORK_ID: int
    NODE: str
    RPC: str


class Testnet1(BaseModel):
    ACCOUNT_PREFIX: str
    BINARY: str
    BLOCK_TIME: int
    CHAIN_ID: str
    DIR: str
    FEE: str
    NETWORK_ID: int
    NODE: str


class Pica(BaseModel):
    devnet: Devnet5
    mainnet: Mainnet3
    testnet: Testnet1


class Model(BaseModel):
    cosmos_hub: CosmosHub = Field(..., alias='cosmos-hub')
    devnet: Devnet1
    neutron: Neutron
    osmosis: Osmosis
    osmosis_centauri: OsmosisCentauri = Field(..., alias='osmosis-centauri')
    pica: Pica
